def predict_target_price(target_type): with open(f"{target_type}.json") as f: input_data = json.load(f) ticker = input_data['arguments']['ticker'] target_type = input_data['arguments']['target_type'] # 데이터 불러오기 df1 = pyupbit.get_ohlcv(ticker, interval="day", count=183) df2 = pyupbit.get_ohlcv(ticker, interval="day", count=183, to=df1.index[0]) DF = pd.concat([df2, df1]) # 입력 데이터 전처리 X = DF[['open', 'high', 'low', 'close', 'volume']].values X_scaler = StandardScaler() X = X_scaler.fit_transform(X) # 출력 데이터 전처리 y = DF[target_type].values y_scaler = StandardScaler() y = y_scaler.fit_transform(y.reshape((-1, 1))) # 학습 데이터 생성 X_train = [] y_train = [] for i in range(365, len(X)): X_train.append(X[i - 365:i, :]) y_train.append(y[i, 0]) X_train = np.array(X_train) y_train = np.array(y_train) # Tensorflow 모델 구성 model = tf.keras.models.Sequential([ tf.keras.layers.LSTM(128, input_shape=(365, 5)), tf.keras.layers.Dense(64, activation='relu'), tf.keras.layers.Dense(64, activation='relu'), tf.keras.layers.Dense(32, activation='relu'), tf.keras.layers.Dense(1) ]) # 모델 컴파일 model.compile(optimizer='adam', loss='mse', run_eagerly=True) # 학습 model.fit(X_train, y_train, epochs=100, verbose=1) # 새로운 데이터에 대한 예측 last_data = DF[['open', 'high', 'low', 'close', 'volume']].iloc[-365:].values last_data_mean = last_data.mean(axis=0) last_data_std = last_data.std(axis=0) last_data = (last_data - last_data_mean) / last_data_std # 예측할 데이터의 shape를 (1, 365, 5)로 변경 last_data = np.expand_dims(last_data, axis=0) predicted_price = model.predict(last_data) predicted_price = y_scaler.inverse_transform(predicted_price) predicted_price = predicted_price.flatten()[0] # 이중 리스트를 일차원으로 변경하고 첫 번째 원소를 선택 return float(predicted_price) Tensorflow 모델 구성 interval의 단위를 6시간으로 변경하고 df를 8개까지 늘리고 싶다.
